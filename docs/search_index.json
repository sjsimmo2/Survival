[["survival-analysis-1.html", "Chapter 2 Survival Analysis 2.1 Stratified Analysis 2.2 Hazard function 2.3 AFT", " Chapter 2 Survival Analysis Welcome to the Survival Analysis module! This document will be periodically udated throughout the course. As always, first things we need to do is get all of the packages needed for the course: library(survival) library(foreign) library(ggplot2) library(survminer) library(rms) library(flexsurv) library(dplyr) library(ciTools) library(here) library(visreg) library(cmprsk) Also need to get data sets that will be used throughout this course: loyalty=read.csv(&quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\loyalty.csv&quot;,header=T) recid=read.csv(&quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\recid.csv&quot;,header=T) recid_long=read.csv(&quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\recid_long.csv&quot;,header=T) recid_lag=read.csv(&quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\recid_lag.csv&quot;,header=T) leaders = read.csv(file = &quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\leaders.csv&quot;, header = TRUE) bladder = read.csv(file = &quot;Q:\\\\My Drive\\\\Fall 3 2016 Survival Analysis\\\\Data\\\\Data_R\\\\bladder.csv&quot;, header = TRUE) simple=data.frame(matrix(c(7,8,10,3,2,3,1,1,0,1,1,0),ncol=2)) colnames(simple)=c(&quot;tenure&quot;,&quot;censored&quot;) To perform a survival analysis, you need to identify which variable has the time information and which variable contains the censoring information. This is done through the Surv function. # Create a Survival Analysis Object simple.s=Surv(time=simple$tenure,event=simple$censored) # Create a Kaplan-Meier Survival Curve with Censoring simple_km=survfit(Surv(time = tenure, event = censored)~1, data = simple) summary(simple_km) ## Call: survfit(formula = Surv(time = tenure, event = censored) ~ 1, ## data = simple) ## ## time n.risk n.event survival std.err lower 95% CI upper 95% CI ## 2 6 1 0.833 0.152 0.5827 1 ## 3 5 1 0.667 0.192 0.3786 1 ## 7 3 1 0.444 0.222 0.1668 1 ## 8 2 1 0.222 0.192 0.0407 1 plot(simple_km, main = &quot;Survival Function&quot;, xlab = &quot;Tenure&quot;, ylab = &quot;Survival Probability&quot;) loyalty.fit=survfit(Surv(Tenure, censored)~1,data=loyalty) summary(loyalty.fit) ## Call: survfit(formula = Surv(Tenure, censored) ~ 1, data = loyalty) ## ## time n.risk n.event survival std.err lower 95% CI upper 95% CI ## 1 250 2 0.9920 0.00563 0.98102 1.000 ## 2 245 5 0.9718 0.01052 0.95135 0.993 ## 3 235 8 0.9387 0.01535 0.90907 0.969 ## 4 220 5 0.9173 0.01772 0.88327 0.953 ## 5 207 4 0.8996 0.01946 0.86226 0.939 ## 6 197 2 0.8905 0.02031 0.85155 0.931 ## 7 189 1 0.8858 0.02074 0.84603 0.927 ## 8 177 6 0.8557 0.02338 0.81112 0.903 ## 9 169 4 0.8355 0.02493 0.78804 0.886 ## 10 160 1 0.8303 0.02531 0.78211 0.881 ## 11 156 4 0.8090 0.02681 0.75811 0.863 ## 12 144 2 0.7977 0.02759 0.74547 0.854 ## 13 137 5 0.7686 0.02949 0.71294 0.829 ## 14 128 2 0.7566 0.03023 0.69963 0.818 ## 15 120 6 0.7188 0.03242 0.65796 0.785 ## 16 107 3 0.6986 0.03354 0.63590 0.768 ## 17 103 1 0.6919 0.03389 0.62851 0.762 ## 18 96 1 0.6846 0.03430 0.62062 0.755 ## 19 94 2 0.6701 0.03508 0.60473 0.742 ## 20 89 2 0.6550 0.03587 0.58836 0.729 ## 21 86 1 0.6474 0.03625 0.58011 0.723 ## 22 82 2 0.6316 0.03705 0.56302 0.709 ## 23 76 1 0.6233 0.03748 0.55400 0.701 ## 24 73 1 0.6148 0.03793 0.54474 0.694 ## 25 71 3 0.5888 0.03918 0.51680 0.671 ## 27 63 1 0.5794 0.03966 0.50671 0.663 ## 28 59 2 0.5598 0.04067 0.48550 0.645 ## 29 57 2 0.5402 0.04155 0.46457 0.628 ## 30 54 1 0.5302 0.04197 0.45397 0.619 ## 31 52 2 0.5098 0.04276 0.43249 0.601 ## 32 50 3 0.4792 0.04369 0.40077 0.573 ## 35 44 3 0.4465 0.04459 0.36713 0.543 ## 36 40 3 0.4130 0.04525 0.33321 0.512 ## 42 31 1 0.3997 0.04571 0.31944 0.500 ## 43 29 1 0.3859 0.04616 0.30526 0.488 ## 44 27 1 0.3716 0.04661 0.29062 0.475 ## 48 24 1 0.3561 0.04717 0.27471 0.462 ## 51 18 1 0.3364 0.04852 0.25351 0.446 ## 53 17 1 0.3166 0.04954 0.23295 0.430 ## 60 12 1 0.2902 0.05196 0.20429 0.412 ## 64 11 1 0.2638 0.05352 0.17726 0.393 ## 78 8 1 0.2308 0.05607 0.14339 0.372 ## 80 7 1 0.1979 0.05694 0.11256 0.348 ## 83 6 1 0.1649 0.05619 0.08454 0.322 ## 95 4 1 0.1237 0.05523 0.05153 0.297 ## 105 3 1 0.0824 0.04988 0.02518 0.270 ## 114 2 1 0.0412 0.03836 0.00665 0.255 ## 129 1 1 0.0000 NaN NA NA plot(loyalty.fit) recid.fit = survfit(Surv(week, arrest)~1,data=recid) summary(recid.fit) ## Call: survfit(formula = Surv(week, arrest) ~ 1, data = recid) ## ## time n.risk n.event survival std.err lower 95% CI upper 95% CI ## 1 432 1 0.998 0.00231 0.993 1.000 ## 2 431 1 0.995 0.00327 0.989 1.000 ## 3 430 1 0.993 0.00400 0.985 1.000 ## 4 429 1 0.991 0.00461 0.982 1.000 ## 5 428 1 0.988 0.00515 0.978 0.999 ## 6 427 1 0.986 0.00563 0.975 0.997 ## 7 426 1 0.984 0.00607 0.972 0.996 ## 8 425 5 0.972 0.00791 0.957 0.988 ## 9 420 2 0.968 0.00852 0.951 0.984 ## 10 418 1 0.965 0.00881 0.948 0.983 ## 11 417 2 0.961 0.00935 0.942 0.979 ## 12 415 2 0.956 0.00987 0.937 0.976 ## 13 413 1 0.954 0.01011 0.934 0.974 ## 14 412 3 0.947 0.01080 0.926 0.968 ## 15 409 2 0.942 0.01123 0.920 0.964 ## 16 407 2 0.937 0.01165 0.915 0.961 ## 17 405 3 0.931 0.01223 0.907 0.955 ## 18 402 3 0.924 0.01278 0.899 0.949 ## 19 399 2 0.919 0.01313 0.894 0.945 ## 20 397 5 0.907 0.01395 0.880 0.935 ## 21 392 2 0.903 0.01425 0.875 0.931 ## 22 390 1 0.900 0.01440 0.873 0.929 ## 23 389 1 0.898 0.01455 0.870 0.927 ## 24 388 4 0.889 0.01512 0.860 0.919 ## 25 384 3 0.882 0.01552 0.852 0.913 ## 26 381 3 0.875 0.01591 0.844 0.907 ## 27 378 2 0.870 0.01616 0.839 0.903 ## 28 376 2 0.866 0.01640 0.834 0.898 ## 30 374 2 0.861 0.01664 0.829 0.894 ## 31 372 1 0.859 0.01675 0.827 0.892 ## 32 371 2 0.854 0.01698 0.822 0.888 ## 33 369 2 0.850 0.01720 0.816 0.884 ## 34 367 2 0.845 0.01742 0.811 0.880 ## 35 365 4 0.836 0.01783 0.801 0.871 ## 36 361 3 0.829 0.01813 0.794 0.865 ## 37 358 4 0.819 0.01851 0.784 0.857 ## 38 354 1 0.817 0.01860 0.781 0.854 ## 39 353 2 0.812 0.01878 0.777 0.850 ## 40 351 4 0.803 0.01913 0.767 0.842 ## 42 347 2 0.799 0.01929 0.762 0.837 ## 43 345 4 0.789 0.01962 0.752 0.829 ## 44 341 2 0.785 0.01977 0.747 0.824 ## 45 339 2 0.780 0.01993 0.742 0.820 ## 46 337 4 0.771 0.02022 0.732 0.812 ## 47 333 1 0.769 0.02029 0.730 0.809 ## 48 332 2 0.764 0.02043 0.725 0.805 ## 49 330 5 0.752 0.02077 0.713 0.794 ## 50 325 3 0.745 0.02096 0.705 0.788 ## 52 322 4 0.736 0.02121 0.696 0.779 ggsurvplot(recid.fit, data = recid, conf.int = T, palette = &quot;purple&quot;, xlab = &quot;Week&quot;, ylab = &quot;Survival Probability&quot;, legend = &quot;none&quot;, break.y.by = 0.1) 2.1 Stratified Analysis We can look at Survival curves segmented into different groups or strata. You need to define the variable that creates the strata in order to create this analysis. Loyal.KP2 = survfit(Surv(Tenure, censored) ~ Loyalty,data=loyalty) ggsurvplot(Loyal.KP2,data=loyalty,palette = c(&quot;blue&quot;,&quot;orange&quot;),conf.int = T) Recid.KP = survfit(Surv(week, arrest) ~ wexp,data=recid) ggsurvplot(Recid.KP,data=recid,palette = c(&quot;blue&quot;,&quot;orange&quot;),conf.int = T,legend.title = &quot;work experience&quot;, legend.labs = c(&quot;no&quot;, &quot;yes&quot;)) # Test for Differences in Survival Curves # survdiff(Surv(Tenure, censored) ~ Loyalty, data=loyalty, rho=0) ## Call: ## survdiff(formula = Surv(Tenure, censored) ~ Loyalty, data = loyalty, ## rho = 0) ## ## N Observed Expected (O-E)^2/E (O-E)^2/V ## Loyalty=0 183 67 65 0.0595 0.176 ## Loyalty=1 67 39 41 0.0944 0.176 ## ## Chisq= 0.2 on 1 degrees of freedom, p= 0.7 # Log-Rank Test survdiff(Surv(Tenure, censored) ~ Loyalty, data=loyalty, rho=1) ## Call: ## survdiff(formula = Surv(Tenure, censored) ~ Loyalty, data = loyalty, ## rho = 1) ## ## N Observed Expected (O-E)^2/E (O-E)^2/V ## Loyalty=0 183 49.6 49.3 0.00155 0.0063 ## Loyalty=1 67 24.9 25.1 0.00303 0.0063 ## ## Chisq= 0 on 1 degrees of freedom, p= 0.9 # Wilcoxon Test survdiff(Surv(week, arrest) ~ wexp, data=recid,rho=0) # Log-Rank Test ## Call: ## survdiff(formula = Surv(week, arrest) ~ wexp, data = recid, rho = 0) ## ## N Observed Expected (O-E)^2/E (O-E)^2/V ## wexp=0 185 62 45.6 5.91 9.91 ## wexp=1 247 52 68.4 3.94 9.91 ## ## Chisq= 9.9 on 1 degrees of freedom, p= 0.002 survdiff(Surv(week, arrest) ~ wexp,data=recid,rho=1) # Wilcoxon Test ## Call: ## survdiff(formula = Surv(week, arrest) ~ wexp, data = recid, rho = 1) ## ## N Observed Expected (O-E)^2/E (O-E)^2/V ## wexp=0 185 55.0 39.9 5.75 11 ## wexp=1 247 44.4 59.5 3.85 11 ## ## Chisq= 11 on 1 degrees of freedom, p= 9e-04 2.2 Hazard function We are able to calculate hazard probabilities and cumulative hazard functions in R. # Calculating Hazard Probabilities h= simple_km$n.event/simple_km$n.risk index.h=rep(0,length=(max(simple$tenure)+1)) #Need to add 0 index.h[(simple_km$time)+1]=h #Because of 0 haz.plot=data.frame(cbind(seq(0,max(simple$tenure)), index.h)) colnames(haz.plot)=c(&quot;Time&quot;,&quot;Hazard&quot;) ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line() h = loyalty.fit$n.event/loyalty.fit$n.risk index.h=rep(0,length=(max(loyalty$Tenure)+1)) #Need to add 0 index.h[(loyalty.fit$time)+1]=h #Because of 0 haz.plot=data.frame(cbind(seq(0,max(loyalty$Tenure)), index.h)) colnames(haz.plot)=c(&quot;Time&quot;,&quot;Hazard&quot;) ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line() h = recid.fit$n.event/recid.fit$n.risk index.h=rep(0,length=(max(recid$week)+1)) #Need to add 0 index.h[(recid.fit$time)+1]=h #Because of 0 haz.plot=data.frame(cbind(seq(0,max(recid$week)), index.h)) colnames(haz.plot)=c(&quot;Time&quot;,&quot;Hazard&quot;) ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line() ggsurvplot(recid.fit, data = recid, fun = &quot;cumhaz&quot;, conf.int = TRUE, palette = &quot;purple&quot;, xlab = &quot;Week&quot;, ylab = &quot;Cumulative Hazard&quot;, legend = &quot;none&quot;) ###Cumulative hazard function h= simple_km$n.event/simple_km$n.risk index.h=rep(0,length=(max(simple$tenure)+1)) #Need to add 0 index.h[(simple_km$time)+1]=h #Because of 0 cum.haz=cumsum(index.h) haz.plot=data.frame(cbind(seq(0,max(simple$tenure)), cum.haz)) colnames(haz.plot)=c(&quot;Time&quot;,&quot;Hazard&quot;) ggplot(haz.plot,aes(x=Time,y=Hazard))+geom_line()+labs(y=&quot;Cumulative Hazard&quot;) ggsurvplot( Recid.KP, data = recid, size = 1, palette = c(&quot;blue&quot;,&quot;orange&quot;), conf.int = TRUE, pval = TRUE, risk.table = TRUE, risk.table.col = &quot;wexp&quot;, legend.labs = c(&quot;No&quot;, &quot;Yes&quot;), risk.table.height = 0.25, ggtheme = theme_bw() ) 2.3 AFT The following R codes illustrate how to fit the Accelerated Failure Time models. # Accelerated Failure Time Model recid.aft.ln &lt;- survreg(Surv(week, arrest) ~ fin + age + mar + prio, data = recid, dist = &#39;lognormal&#39;) summary(recid.aft.ln) ## ## Call: ## survreg(formula = Surv(week, arrest) ~ fin + age + mar + prio, ## data = recid, dist = &quot;lognormal&quot;) ## Value Std. Error z p ## (Intercept) 4.0146 0.3897 10.30 &lt; 2e-16 ## fin 0.3319 0.1657 2.00 0.04524 ## age 0.0333 0.0153 2.18 0.02959 ## mar 0.5609 0.2928 1.92 0.05541 ## prio -0.0743 0.0264 -2.82 0.00481 ## Log(scale) 0.2723 0.0765 3.56 0.00037 ## ## Scale= 1.31 ## ## Log Normal distribution ## Loglik(model)= -685.5 Loglik(intercept only)= -697.9 ## Chisq= 24.85 on 4 degrees of freedom, p= 5.4e-05 ## Number of Newton-Raphson Iterations: 4 ## n= 432 #Parameter interpretation (exp(coef(recid.aft.ln))-1)*100 ## (Intercept) fin age mar prio ## 5439.988576 39.357426 3.386427 75.223685 -7.163067 # Exponential vs. Weibull recid.aft.w &lt;- survreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &#39;weibull&#39;) summary(recid.aft.w) ## ## Call: ## survreg(formula = Surv(week, arrest) ~ fin + age + wexp + mar + ## paro + prio, data = recid, dist = &quot;weibull&quot;) ## Value Std. Error z p ## (Intercept) 3.8086 0.3762 10.12 &lt; 2e-16 ## fin 0.2625 0.1376 1.91 0.05650 ## age 0.0400 0.0159 2.51 0.01210 ## wexp 0.1115 0.1516 0.74 0.46196 ## mar 0.3389 0.2725 1.24 0.21366 ## paro 0.0538 0.1394 0.39 0.69956 ## prio -0.0646 0.0210 -3.08 0.00208 ## Log(scale) -0.3383 0.0891 -3.80 0.00015 ## ## Scale= 0.713 ## ## Weibull distribution ## Loglik(model)= -680.5 Loglik(intercept only)= -696.6 ## Chisq= 32.28 on 6 degrees of freedom, p= 1.4e-05 ## Number of Newton-Raphson Iterations: 6 ## n= 432 # Checking Distributions recid.aft.w &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;weibull&quot;) plot(recid.aft.w, type = &quot;cumhaz&quot;, ci = TRUE, conf.int = FALSE, las = 1, bty = &quot;n&quot;, xlab = &quot;week&quot;, ylab = &quot;Cumulative Hazard&quot;, main = &quot;Weibull Distribution&quot;) recid.aft.e &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;exp&quot;) plot(recid.aft.e, type = &quot;cumhaz&quot;, ci = TRUE, conf.int = FALSE, las = 1, bty = &quot;n&quot;, xlab = &quot;week&quot;, ylab = &quot;Cumulative Hazard&quot;, main = &quot;Exponential Distribution&quot;) recid.aft.g &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + race + wexp + mar + paro + prio, data = recid, dist = &quot;gamma&quot;) plot(recid.aft.g, type = &quot;cumhaz&quot;, ci = TRUE, conf.int = FALSE, las = 1, bty = &quot;n&quot;, xlab = &quot;week&quot;, ylab = &quot;Cumulative Hazard&quot;, main = &quot;Gamma Distribution&quot;) recid.aft.ll &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + race + wexp + mar + paro + prio, data = recid, dist = &quot;llogis&quot;) plot(recid.aft.ll, type = &quot;cumhaz&quot;, ci = TRUE, conf.int = FALSE, las = 1, bty = &quot;n&quot;, xlab = &quot;week&quot;, ylab = &quot;Cumulative Hazard&quot;, main = &quot;Log-Logistic Distribution&quot;) # Goodness-of-Fit Tests like.e = flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;exp&quot;)$loglik like.w &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;weibull&quot;)$loglik like.ln &lt;- flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;lnorm&quot;)$loglik like.g = flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;gamma&quot;)$loglik like.ll = flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;llogis&quot;)$loglik like.f = flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio, data = recid, dist = &quot;genf&quot;)$loglik ## Warning in flexsurvreg(Surv(week, arrest) ~ fin + age + wexp + mar + paro + : ## Optimisation has probably not converged to the maximum likelihood - Hessian is ## not positive definite. pval.e.g = pchisq((-2*(like.e-like.g)), 2,lower.tail=F) pval.w.g = pchisq((-2*(like.w-like.g)), 1,lower.tail=F) pval.ln.g = pchisq((-2*(like.ln-like.g)), 1,lower.tail=F) ##pval.g.f = pchisq((-2*(like.g-like.f)), 1,lower.tail=F) Tests = c(&#39;Exp vs. Gam&#39;, &#39;Wei vs. Gam&#39;, &#39;LogN vs. Gam&#39;) P_values = c(pval.e.g, pval.w.g, pval.ln.g) cbind(Tests, P_values) ## Tests P_values ## [1,] &quot;Exp vs. Gam&quot; &quot;0.00194259347065262&quot; ## [2,] &quot;Wei vs. Gam&quot; &quot;1&quot; ## [3,] &quot;LogN vs. Gam&quot; &quot;0.00767095999547646&quot; # Predicted Survival Quantiles recid.aft.w = survreg(Surv(week, arrest) ~ fin + age +prio, data = recid, dist = &#39;weibull&#39;) summary(recid.aft.w) ## ## Call: ## survreg(formula = Surv(week, arrest) ~ fin + age + prio, data = recid, ## dist = &quot;weibull&quot;) ## Value Std. Error z p ## (Intercept) 3.7738 0.3581 10.54 &lt; 2e-16 ## fin 0.2495 0.1372 1.82 0.06901 ## age 0.0478 0.0154 3.11 0.00189 ## prio -0.0698 0.0201 -3.47 0.00051 ## Log(scale) -0.3367 0.0892 -3.77 0.00016 ## ## Scale= 0.714 ## ## Weibull distribution ## Loglik(model)= -682 Loglik(intercept only)= -696.6 ## Chisq= 29.17 on 3 degrees of freedom, p= 2.1e-06 ## Number of Newton-Raphson Iterations: 6 ## n= 432 survprob.75.50.25 = predict(recid.aft.w, type = &quot;quantile&quot;, se.fit = TRUE,p = c(0.25, 0.5, 0.75)) head(survprob.75.50.25$fit) ## [,1] [,2] [,3] ## [1,] 52.68849 98.72758 161.95827 ## [2,] 24.17956 45.30760 74.32514 ## [3,] 17.89085 33.52383 54.99438 ## [4,] 64.22717 120.34873 197.42682 ## [5,] 35.95471 67.37185 110.52057 ## [6,] 48.95457 91.73097 150.48064 # Predicted Mean Event Time # p.time.mean = predict(recid.aft.w, type = &quot;response&quot;, se.fit = TRUE) head(p.time.mean$fit, n = 10) ## [1] 128.26394 58.86229 43.55317 156.35349 87.52751 119.17415 143.73152 ## [8] 115.26040 81.92984 113.19494 # Predicted Survival Probabilities # survprob.actual = 1 - psurvreg(recid$week, mean = predict(recid.aft.w, type = &quot;lp&quot;), scale = recid.aft.w$scale, distribution = recid.aft.w$dist) head(survprob.actual, n = 10) ## [1] 0.9285822 0.8389085 0.6315234 0.8073231 0.6173609 0.7312118 0.9260438 ## [8] 0.7203354 0.5891529 0.7143008 survprob.10wk = 1 - psurvreg(10, mean = predict(recid.aft.w, type = &quot;lp&quot;), scale = recid.aft.w$scale, distribution = recid.aft.w$dist) head(survprob.10wk) ## [1] 0.9723202 0.9198457 0.8803901 0.9789527 0.9531961 0.9693657 # Predicted Change in Event Time # new_time = qsurvreg(1 - survprob.actual, mean = predict(recid.aft.w, type = &quot;lp&quot;) + coef(recid.aft.w)[&#39;fin&#39;], scale = recid.aft.w$scale, distribution = recid.aft.w$dist) recid$new_time = new_time recid$diff = recid$new_time - recid$week head(data.frame(recid$week, recid$new_time, recid$diff), n = 10) ## recid.week recid.new_time recid.diff ## 1 20 25.66776 5.667764 ## 2 17 21.81760 4.817600 ## 3 25 32.08471 7.084706 ## 4 52 66.73619 14.736188 ## 5 52 66.73619 14.736188 ## 6 52 66.73619 14.736188 ## 7 23 29.51793 6.517929 ## 8 52 66.73619 14.736188 ## 9 52 66.73619 14.736188 ## 10 52 66.73619 14.736188 2.3.1 Breaking down the above code into smaller pieces! In the survival regression, when we use the predict command (with nothing else), this is predicting the mean survival time. This means, on average when do we think the event will occur? For example, we will continue to use the recidivism data set with the Weibull distribution with the variables fin, age and prior. The following command will predict the mean time of the event occurring (only printing off a few to see). recid.aft.w = survreg(Surv(week, arrest) ~ fin + age +prio, data = recid, dist = &#39;weibull&#39;) head(predict(recid.aft.w)) ## [1] 128.26394 58.86229 43.55317 156.35349 87.52751 119.17415 But does it make sense to predict on average when we think an event will occur (or when an event will fail)? Probably not. Another approach would be to print the quantiles (for example the 25th, 50th and 75th quantile). survprob.75.50.25 = predict(recid.aft.w, type = &quot;quantile&quot;, se.fit = TRUE,p = c(0.25, 0.5, 0.75)) head(survprob.75.50.25$fit) ## [,1] [,2] [,3] ## [1,] 52.68849 98.72758 161.95827 ## [2,] 24.17956 45.30760 74.32514 ## [3,] 17.89085 33.52383 54.99438 ## [4,] 64.22717 120.34873 197.42682 ## [5,] 35.95471 67.37185 110.52057 ## [6,] 48.95457 91.73097 150.48064 Did you know that from this regression, each observation has their own survival curve? That is why we can get quantiles (we can go the opposite direction and get percentiles too!). Below you will find the survival curve for person 1 quant.prob=seq(0.05,0.95,by=0.05) survprob = predict(recid.aft.w, type = &quot;quantile&quot;, se.fit = TRUE,p = quant.prob) surv.prob=rev(quant.prob) graph.dat=data.frame(cbind(survprob$fit[1,],surv.prob)) colnames(graph.dat)=c(&quot;Tenure&quot;,&quot;SurvivalProb&quot;) ggplot(graph.dat,aes(x=Tenure,y=SurvivalProb))+geom_line(color=&quot;blue&quot;)+labs(title=&quot;Survival Curve for Person 1&quot;,x=&quot;Tenure&quot;,y=&quot;Survival Probability&quot;) We just predicted quantiles. We can go the opposite direction and find probabilities. To do this, the survreg function allows us to simply do psurvreg (we could have actually used qsurvreg for the previous piece in getting quantiles!!). Keep in mind that psurvreg is for the FAILURE probability (to get survival probabilities, we need to take 1-p, where p is the failure probability). The below code finds the survival probability for each observed time! For example, person 1 was arrested on week 20 (where did that fall on their predicted survival curve?). Person 2 was arrested in week 17 (where did that fall on its predicted survival curve?). survprob.actual = 1 - psurvreg(recid$week, mean = predict(recid.aft.w, type = &quot;lp&quot;), scale = recid.aft.w$scale, distribution = recid.aft.w$dist) head(survprob.actual, n = 10) ## [1] 0.9285822 0.8389085 0.6315234 0.8073231 0.6173609 0.7312118 0.9260438 ## [8] 0.7203354 0.5891529 0.7143008 We can also do this for a given point in time (say 10 weeks). survprob.10wk = 1 - psurvreg(10, mean = predict(recid.aft.w, type = &quot;lp&quot;), scale = recid.aft.w$scale, distribution = recid.aft.w$dist) head(survprob.10wk) ## [1] 0.9723202 0.9198457 0.8803901 0.9789527 0.9531961 0.9693657 To see the impact of the financial variable, we can look at those who did NOT have financial aid and what would they look like if they did have financial aid (impact of providing financial aid). # Predicted Change in Event Time # new_time = qsurvreg(1 - survprob.actual, mean = predict(recid.aft.w, type = &quot;lp&quot;) + coef(recid.aft.w)[&#39;fin&#39;], scale = recid.aft.w$scale, distribution = recid.aft.w$dist) recid$new_time = new_time recid$diff = recid$new_time - recid$week impact.fin=data.frame(recid$week, recid$new_time, recid$diff,recid$arrest,recid$fin) colnames(impact.fin)=c(&quot;O.Week&quot;,&quot;N.Week&quot;,&quot;Diff&quot;,&quot;Arrest&quot;,&quot;Fin&quot;) impact.fin2=subset(impact.fin,Arrest==1 &amp; Fin==0) head(impact.fin2) ## O.Week N.Week Diff Arrest Fin ## 1 20 25.66776 5.667764 1 0 ## 2 17 21.81760 4.817600 1 0 ## 3 25 32.08471 7.084706 1 0 ## 7 23 29.51793 6.517929 1 0 ## 13 37 47.48536 10.485364 1 0 ## 15 25 32.08471 7.084706 1 0 "],["cox-regression.html", "Chapter 3 Cox Regression 3.1 Diagnostics", " Chapter 3 Cox Regression The following code fits the Proportional Cox Hazard model. # Proportional Hazards Model # recid.ph &lt;- coxph(Surv(week, arrest) ~ fin + age + wexp + mar +paro + prio, data = recid) summary(recid.ph) ## Call: ## coxph(formula = Surv(week, arrest) ~ fin + age + wexp + mar + ## paro + prio, data = recid) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.36554 0.69382 0.19090 -1.915 0.05552 . ## age -0.05633 0.94523 0.02189 -2.573 0.01007 * ## wexp -0.15699 0.85471 0.21208 -0.740 0.45916 ## mar -0.47130 0.62419 0.38027 -1.239 0.21520 ## paro -0.07792 0.92504 0.19530 -0.399 0.68991 ## prio 0.08966 1.09380 0.02871 3.123 0.00179 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.6938 1.4413 0.4773 1.0087 ## age 0.9452 1.0579 0.9055 0.9867 ## wexp 0.8547 1.1700 0.5640 1.2952 ## mar 0.6242 1.6021 0.2962 1.3152 ## paro 0.9250 1.0810 0.6308 1.3564 ## prio 1.0938 0.9142 1.0340 1.1571 ## ## Concordance= 0.639 (se = 0.027 ) ## Likelihood ratio test= 32.14 on 6 df, p=2e-05 ## Wald test = 30.79 on 6 df, p=3e-05 ## Score (logrank) test = 32.28 on 6 df, p=1e-05 # Parameter Interpretation # recid.ph2 &lt;- coxph(Surv(week, arrest) ~ fin + age + prio, data = recid) summary(recid.ph2) ## Call: ## coxph(formula = Surv(week, arrest) ~ fin + age + prio, data = recid) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.34695 0.70684 0.19025 -1.824 0.068197 . ## age -0.06711 0.93510 0.02085 -3.218 0.001289 ** ## prio 0.09689 1.10174 0.02725 3.555 0.000378 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.7068 1.4148 0.4868 1.0263 ## age 0.9351 1.0694 0.8977 0.9741 ## prio 1.1017 0.9077 1.0444 1.1622 ## ## Concordance= 0.63 (se = 0.027 ) ## Likelihood ratio test= 29.05 on 3 df, p=2e-06 ## Wald test = 27.94 on 3 df, p=4e-06 ## Score (logrank) test = 29.03 on 3 df, p=2e-06 (exp(coef(recid.ph2))-1)*100 ## fin age prio ## -29.31625 -6.49033 10.17427 # Automatic Selection Techniques # full.model &lt;- coxph(Surv(week, arrest) ~ fin + age + wexp + mar +paro + prio, data = recid) empty.model &lt;- coxph(Surv(week, arrest ) ~ 1, data = recid) step.model &lt;- step(empty.model, scope = list(lower=formula(empty.model), upper=formula(full.model)), direction = &quot;both&quot;) ## Start: AIC=1350.76 ## Surv(week, arrest) ~ 1 ## ## Df AIC ## + age 1 1337.5 ## + prio 1 1340.8 ## + wexp 1 1343.1 ## + mar 1 1348.1 ## + fin 1 1348.9 ## &lt;none&gt; 1350.8 ## + paro 1 1352.4 ## ## Step: AIC=1337.49 ## Surv(week, arrest) ~ age ## ## Df AIC ## + prio 1 1329.1 ## + wexp 1 1336.4 ## + fin 1 1336.5 ## &lt;none&gt; 1337.5 ## + mar 1 1337.5 ## + paro 1 1338.6 ## - age 1 1350.8 ## ## Step: AIC=1329.08 ## Surv(week, arrest) ~ age + prio ## ## Df AIC ## + fin 1 1327.7 ## + mar 1 1329.0 ## &lt;none&gt; 1329.1 ## + wexp 1 1330.0 ## + paro 1 1330.9 ## - prio 1 1337.5 ## - age 1 1340.8 ## ## Step: AIC=1327.71 ## Surv(week, arrest) ~ age + prio + fin ## ## Df AIC ## + mar 1 1327.3 ## &lt;none&gt; 1327.7 ## + wexp 1 1328.6 ## - fin 1 1329.1 ## + paro 1 1329.4 ## - prio 1 1336.5 ## - age 1 1338.3 ## ## Step: AIC=1327.35 ## Surv(week, arrest) ~ age + prio + fin + mar ## ## Df AIC ## &lt;none&gt; 1327.3 ## - mar 1 1327.7 ## + wexp 1 1328.8 ## - fin 1 1329.0 ## + paro 1 1329.2 ## - age 1 1335.4 ## - prio 1 1336.2 summary(step.model) ## Call: ## coxph(formula = Surv(week, arrest) ~ age + prio + fin + mar, ## data = recid) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## age -0.06042 0.94137 0.02085 -2.897 0.00376 ** ## prio 0.09751 1.10243 0.02722 3.583 0.00034 *** ## fin -0.36020 0.69753 0.19049 -1.891 0.05864 . ## mar -0.53312 0.58677 0.37276 -1.430 0.15266 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## age 0.9414 1.0623 0.9037 0.9806 ## prio 1.1024 0.9071 1.0452 1.1628 ## fin 0.6975 1.4336 0.4802 1.0132 ## mar 0.5868 1.7042 0.2826 1.2183 ## ## Concordance= 0.633 (se = 0.027 ) ## Likelihood ratio test= 31.41 on 4 df, p=3e-06 ## Wald test = 29.98 on 4 df, p=5e-06 ## Score (logrank) test = 31.25 on 4 df, p=3e-06 full.model &lt;- coxph(Surv(week, arrest) ~ fin + age + wexp + mar +paro + prio, data = recid) back.model &lt;- step(full.model, direction = &quot;backward&quot;) ## Start: AIC=1330.62 ## Surv(week, arrest) ~ fin + age + wexp + mar + paro + prio ## ## Df AIC ## - paro 1 1328.8 ## - wexp 1 1329.2 ## - mar 1 1330.3 ## &lt;none&gt; 1330.6 ## - fin 1 1332.3 ## - age 1 1336.3 ## - prio 1 1337.2 ## ## Step: AIC=1328.78 ## Surv(week, arrest) ~ fin + age + wexp + mar + prio ## ## Df AIC ## - wexp 1 1327.3 ## - mar 1 1328.6 ## &lt;none&gt; 1328.8 ## - fin 1 1330.4 ## - age 1 1334.3 ## - prio 1 1335.8 ## ## Step: AIC=1327.35 ## Surv(week, arrest) ~ fin + age + mar + prio ## ## Df AIC ## &lt;none&gt; 1327.3 ## - mar 1 1327.7 ## - fin 1 1329.0 ## - age 1 1335.4 ## - prio 1 1336.2 summary(back.model) ## Call: ## coxph(formula = Surv(week, arrest) ~ fin + age + mar + prio, ## data = recid) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.36020 0.69753 0.19049 -1.891 0.05864 . ## age -0.06042 0.94137 0.02085 -2.897 0.00376 ** ## mar -0.53312 0.58677 0.37276 -1.430 0.15266 ## prio 0.09751 1.10243 0.02722 3.583 0.00034 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.6975 1.4336 0.4802 1.0132 ## age 0.9414 1.0623 0.9037 0.9806 ## mar 0.5868 1.7042 0.2826 1.2183 ## prio 1.1024 0.9071 1.0452 1.1628 ## ## Concordance= 0.633 (se = 0.027 ) ## Likelihood ratio test= 31.41 on 4 df, p=3e-06 ## Wald test = 29.98 on 4 df, p=5e-06 ## Score (logrank) test = 31.25 on 4 df, p=3e-06 full.model &lt;- coxph(Surv(week, arrest) ~ fin + age + wexp + mar +paro + prio, data = recid) empty.model &lt;- coxph(Surv(week, arrest) ~ 1, data = recid) for.model &lt;- step(empty.model, scope = list(lower=formula(empty.model), upper=formula(full.model)), direction = &quot;forward&quot;) ## Start: AIC=1350.76 ## Surv(week, arrest) ~ 1 ## ## Df AIC ## + age 1 1337.5 ## + prio 1 1340.8 ## + wexp 1 1343.1 ## + mar 1 1348.1 ## + fin 1 1348.9 ## &lt;none&gt; 1350.8 ## + paro 1 1352.4 ## ## Step: AIC=1337.49 ## Surv(week, arrest) ~ age ## ## Df AIC ## + prio 1 1329.1 ## + wexp 1 1336.4 ## + fin 1 1336.5 ## &lt;none&gt; 1337.5 ## + mar 1 1337.5 ## + paro 1 1338.6 ## ## Step: AIC=1329.08 ## Surv(week, arrest) ~ age + prio ## ## Df AIC ## + fin 1 1327.7 ## + mar 1 1329.0 ## &lt;none&gt; 1329.1 ## + wexp 1 1330.0 ## + paro 1 1330.9 ## ## Step: AIC=1327.71 ## Surv(week, arrest) ~ age + prio + fin ## ## Df AIC ## + mar 1 1327.3 ## &lt;none&gt; 1327.7 ## + wexp 1 1328.6 ## + paro 1 1329.4 ## ## Step: AIC=1327.35 ## Surv(week, arrest) ~ age + prio + fin + mar ## ## Df AIC ## &lt;none&gt; 1327.3 ## + wexp 1 1328.8 ## + paro 1 1329.2 summary(for.model) ## Call: ## coxph(formula = Surv(week, arrest) ~ age + prio + fin + mar, ## data = recid) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## age -0.06042 0.94137 0.02085 -2.897 0.00376 ** ## prio 0.09751 1.10243 0.02722 3.583 0.00034 *** ## fin -0.36020 0.69753 0.19049 -1.891 0.05864 . ## mar -0.53312 0.58677 0.37276 -1.430 0.15266 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## age 0.9414 1.0623 0.9037 0.9806 ## prio 1.1024 0.9071 1.0452 1.1628 ## fin 0.6975 1.4336 0.4802 1.0132 ## mar 0.5868 1.7042 0.2826 1.2183 ## ## Concordance= 0.633 (se = 0.027 ) ## Likelihood ratio test= 31.41 on 4 df, p=3e-06 ## Wald test = 29.98 on 4 df, p=5e-06 ## Score (logrank) test = 31.25 on 4 df, p=3e-06 # Estimated Survival Curves # newdata &lt;- data.frame(fin = c(1, 0), age = 30, wexp = c(1, 0), mar = 0, paro = 0, prio = c(0, 4)) ggsurvplot(survfit(recid.ph, newdata), data = newdata, break.y.by = 0.1, palette = c(&quot;purple&quot;, &quot;black&quot;), ylab = &quot;survival probability&quot;, xlab = &quot;week&quot;, legend.labs = c(&quot;1&quot;, &quot;2&quot;), legend.title = &quot;subject&quot;) ## Warning: `gather_()` was deprecated in tidyr 1.2.0. ## Please use `gather()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. 3.1 Diagnostics Assumptions made for the Cox PH model is linearity for the continuous variables and proportional hazards throughout time (i.e. at EACH time point, the proportion between the hazards remains the same!). We can assess both of these through use of residuals. # Concordance recid.ph = coxph(Surv(week, arrest) ~ fin + age + prio, data = recid) concordance(recid.ph) ## Call: ## concordance.coxph(object = recid.ph) ## ## n= 432 ## Concordance= 0.6302 se= 0.02729 ## concordant discordant tied.x tied.y tied.xy ## 26736 15651 195 111 0 ## Partial residuals...Linearity recid.ph &lt;- coxph(Surv(week, arrest) ~ fin + age + wexp + mar +paro + prio, data = recid) visreg(recid.ph, &quot;age&quot;, xlab = &quot;age&quot;, ylab = &quot;partial residuals&quot;, gg = TRUE, band = FALSE) + geom_smooth(col = &quot;red&quot;, fill = &quot;red&quot;) + theme_bw() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; visreg(recid.ph, &quot;prio&quot;, xlab = &quot;#prior convictions&quot;, ylab = &quot;partial residuals&quot;, gg = TRUE, band = FALSE) + geom_smooth(col = &quot;red&quot;, fill = &quot;red&quot;) + theme_bw() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Martingale residuals...Linearity recid.lin &lt;- coxph(Surv(week, arrest) ~ age + prio, data = recid) survminer::ggcoxfunctional(recid.lin,data=recid) ## Try transformations recid.lin &lt;- coxph(Surv(week, arrest) ~ sqrt(age) , data = recid) survminer::ggcoxfunctional(recid.lin,data=recid) # Proportional Hazard Test - Schoenfeld Residuals recid.ph.zph &lt;- cox.zph(recid.ph, transform = &quot;identity&quot;) recid.ph.zph ## chisq df p ## fin 0.00878 1 0.9254 ## age 6.55134 1 0.0105 ## wexp 3.94780 1 0.0469 ## mar 1.04080 1 0.3076 ## paro 0.02280 1 0.8800 ## prio 0.42929 1 0.5123 ## GLOBAL 16.85230 6 0.0098 ggcoxzph(recid.ph.zph) # Can try transformations.. recid.ph.zph2 = cox.zph(recid.ph, transform = &quot;km&quot;) recid.ph.zph2 ## chisq df p ## fin 0.0621 1 0.803 ## age 5.9161 1 0.015 ## wexp 4.2983 1 0.038 ## mar 1.0207 1 0.312 ## paro 0.0140 1 0.906 ## prio 0.5254 1 0.469 ## GLOBAL 16.4474 6 0.012 recid.ph.zph3 = cox.zph(recid.ph, transform = &quot;identity&quot;) recid.ph.zph3 ## chisq df p ## fin 0.00878 1 0.9254 ## age 6.55134 1 0.0105 ## wexp 3.94780 1 0.0469 ## mar 1.04080 1 0.3076 ## paro 0.02280 1 0.8800 ## prio 0.42929 1 0.5123 ## GLOBAL 16.85230 6 0.0098 recid.ph.zph4 = cox.zph(recid.ph, transform = &quot;log&quot;) recid.ph.zph4 ## chisq df p ## fin 0.1391 1 0.7092 ## age 8.1533 1 0.0043 ## wexp 2.1341 1 0.1441 ## mar 1.1319 1 0.2874 ## paro 0.2092 1 0.6474 ## prio 0.0126 1 0.9105 ## GLOBAL 16.6501 6 0.0107 If we believe that the PH assumption is not true for one (or more) variables, then we can explore what type of relationship is the best (with respect to time). Options are identity, log and KM (although identity and log are the most commonly used). The first part of the code below illustrates how to fit the time-dependent coefficients. The second part of the R code below illustrates how to fit time-varying variables (variables that change their values throughout time). # Time-Dependent Coefficients # recid.ph.tdc &lt;- coxph(Surv(week, arrest) ~ fin + wexp + mar + paro + prio+ age + tt(age), data = recid, tt = function(x, time, ...){x*log(time)}) summary(recid.ph.tdc) ## Call: ## coxph(formula = Surv(week, arrest) ~ fin + wexp + mar + paro + ## prio + age + tt(age), data = recid, tt = function(x, time, ## ...) { ## x * log(time) ## }) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.36527 0.69401 0.19087 -1.914 0.05566 . ## wexp -0.13317 0.87531 0.21247 -0.627 0.53080 ## mar -0.45279 0.63585 0.38041 -1.190 0.23394 ## paro -0.08490 0.91860 0.19534 -0.435 0.66382 ## prio 0.09177 1.09611 0.02880 3.186 0.00144 ** ## age 0.12174 1.12946 0.06535 1.863 0.06249 . ## tt(age) -0.05931 0.94242 0.02182 -2.718 0.00658 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.6940 1.4409 0.4774 1.0089 ## wexp 0.8753 1.1424 0.5772 1.3275 ## mar 0.6358 1.5727 0.3017 1.3402 ## paro 0.9186 1.0886 0.6264 1.3471 ## prio 1.0961 0.9123 1.0359 1.1598 ## age 1.1295 0.8854 0.9937 1.2838 ## tt(age) 0.9424 1.0611 0.9030 0.9836 ## ## Concordance= 0.648 (se = 0.027 ) ## Likelihood ratio test= 38.72 on 7 df, p=2e-06 ## Wald test = 35.09 on 7 df, p=1e-05 ## Score (logrank) test = 36.97 on 7 df, p=5e-06 recid.ph.tdc &lt;- coxph(Surv(week, arrest) ~ fin + prio + age + tt(age), data = recid, tt = function(x, time, ...){x*log(time)}) summary(recid.ph.tdc) ## Call: ## coxph(formula = Surv(week, arrest) ~ fin + prio + age + tt(age), ## data = recid, tt = function(x, time, ...) { ## x * log(time) ## }) ## ## n= 432, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.34878 0.70555 0.19025 -1.833 0.066762 . ## prio 0.09837 1.10337 0.02731 3.603 0.000315 *** ## age 0.11991 1.12739 0.06623 1.810 0.070220 . ## tt(age) -0.06195 0.93993 0.02207 -2.807 0.005005 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.7055 1.4173 0.4859 1.0244 ## prio 1.1034 0.9063 1.0459 1.1640 ## age 1.1274 0.8870 0.9901 1.2837 ## tt(age) 0.9399 1.0639 0.9001 0.9815 ## ## Concordance= 0.635 (se = 0.028 ) ## Likelihood ratio test= 36 on 4 df, p=3e-07 ## Wald test = 32.41 on 4 df, p=2e-06 ## Score (logrank) test = 33.75 on 4 df, p=8e-07 # Time Varying Variables # recid_long.ph &lt;- coxph(Surv(start, stop, arrested) ~ fin + age + prio + employed, data = recid_long) summary(recid_long.ph) ## Call: ## coxph(formula = Surv(start, stop, arrested) ~ fin + age + prio + ## employed, data = recid_long) ## ## n= 19809, number of events= 114 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.33051 0.71856 0.19012 -1.738 0.08214 . ## age -0.04977 0.95145 0.02053 -2.424 0.01537 * ## prio 0.08364 1.08724 0.02775 3.014 0.00258 ** ## employed -1.34815 0.25972 0.24928 -5.408 6.37e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.7186 1.3917 0.4950 1.0430 ## age 0.9515 1.0510 0.9139 0.9905 ## prio 1.0872 0.9198 1.0297 1.1480 ## employed 0.2597 3.8503 0.1593 0.4233 ## ## Concordance= 0.703 (se = 0.023 ) ## Likelihood ratio test= 66.19 on 4 df, p=1e-13 ## Wald test = 53.93 on 4 df, p=5e-11 ## Score (logrank) test = 62.05 on 4 df, p=1e-12 recid_lag.ph &lt;- coxph(Surv(start, stop, arrested) ~ fin + age + prio + employed, data = recid_lag) summary(recid_lag.ph) ## Call: ## coxph(formula = Surv(start, stop, arrested) ~ fin + age + prio + ## employed, data = recid_lag) ## ## n= 19377, number of events= 113 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## fin -0.32464 0.72278 0.19077 -1.702 0.088803 . ## age -0.05462 0.94685 0.02073 -2.635 0.008409 ** ## prio 0.09158 1.09590 0.02753 3.326 0.000880 *** ## employed -0.81123 0.44431 0.21648 -3.747 0.000179 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## fin 0.7228 1.3835 0.4973 1.0505 ## age 0.9468 1.0561 0.9092 0.9861 ## prio 1.0959 0.9125 1.0383 1.1567 ## employed 0.4443 2.2507 0.2907 0.6791 ## ## Concordance= 0.665 (se = 0.027 ) ## Likelihood ratio test= 44.5 on 4 df, p=5e-09 ## Wald test = 40.91 on 4 df, p=3e-08 ## Score (logrank) test = 43.68 on 4 df, p=7e-09 "],["competing-risks.html", "Chapter 4 Competing Risks", " Chapter 4 Competing Risks The following code illustrates how to do a competing risk model. leaders$lost = factor(leaders$lost, 0:3, labels = c(&quot;In-Office&quot;, &quot;Constitutional&quot;, &quot;Natural&quot;, &quot;Non-Constitutional&quot;)) # Cumulative Incidence Functions # cif.dat=leaders[leaders$lost!=&quot;In-Office&quot;,] cif.tenure=cif.dat$years cif.status=cif.dat$lost cif.leaders=cuminc(cif.tenure,cif.status,rho=0) ggcompetingrisks(cif.leaders) # Cox Regression Competing Risks # tenure=leaders$years View(leaders) status.leaders=leaders$lost x=leaders[,3:12] x$africa=ifelse(leaders$region==1,1,0) x$asia=ifelse(leaders$region==2,1,0) x$latin=ifelse(leaders$region==3,1,0) gray.natural=crr(tenure,status.leaders,x,failcode=&quot;Natural&quot;) ## 34 cases omitted due to missing values summary(gray.natural) ## Competing Risks Regression ## ## Call: ## crr(ftime = tenure, fstatus = status.leaders, cov1 = x, failcode = &quot;Natural&quot;) ## ## coef exp(coef) se(coef) z p-value ## manner -7.32e-02 0.929 0.562617 -0.13007 0.9000 ## start -8.33e-02 0.920 0.026453 -3.14757 0.0016 ## military -2.51e-01 0.778 0.549101 -0.45674 0.6500 ## age 4.75e-02 1.049 0.018127 2.62190 0.0087 ## conflict -2.13e-03 0.998 0.440003 -0.00484 1.0000 ## loginc 5.55e-01 1.741 0.261591 2.11995 0.0340 ## growth 9.80e-02 1.103 0.128218 0.76408 0.4400 ## pop 2.41e-03 1.002 0.002784 0.86500 0.3900 ## land -8.76e-05 1.000 0.000189 -0.46445 0.6400 ## literacy -6.71e-03 0.993 0.011000 -0.60956 0.5400 ## africa 4.44e-01 1.559 0.710063 0.62578 0.5300 ## asia -6.97e-01 0.498 0.821035 -0.84936 0.4000 ## latin 1.22e-01 1.129 0.625890 0.19434 0.8500 ## ## exp(coef) exp(-coef) 2.5% 97.5% ## manner 0.929 1.076 0.3085 2.800 ## start 0.920 1.087 0.8736 0.969 ## military 0.778 1.285 0.2653 2.283 ## age 1.049 0.954 1.0121 1.087 ## conflict 0.998 1.002 0.4213 2.364 ## loginc 1.741 0.574 1.0427 2.907 ## growth 1.103 0.907 0.8578 1.418 ## pop 1.002 0.998 0.9970 1.008 ## land 1.000 1.000 0.9995 1.000 ## literacy 0.993 1.007 0.9721 1.015 ## africa 1.559 0.641 0.3878 6.272 ## asia 0.498 2.008 0.0996 2.489 ## latin 1.129 0.885 0.3312 3.851 ## ## Num. cases = 438 (34 cases omitted due to missing values) ## Pseudo Log-likelihood = -149 ## Pseudo likelihood ratio test = 29.4 on 13 df, gray.const=crr(tenure,status.leaders,x,failcode=&quot;Constitutional&quot;) ## 34 cases omitted due to missing values summary(gray.const) ## Competing Risks Regression ## ## Call: ## crr(ftime = tenure, fstatus = status.leaders, cov1 = x, failcode = &quot;Constitutional&quot;) ## ## coef exp(coef) se(coef) z p-value ## manner -6.20e-01 0.538 2.64e-01 -2.34926 0.0190 ## start -1.79e-02 0.982 9.79e-03 -1.83105 0.0670 ## military 1.22e-01 1.130 2.49e-01 0.48991 0.6200 ## age 1.37e-02 1.014 8.45e-03 1.61657 0.1100 ## conflict -1.67e-01 0.846 2.16e-01 -0.77554 0.4400 ## loginc -1.35e-01 0.874 1.15e-01 -1.17732 0.2400 ## growth 4.18e-02 1.043 3.02e-02 1.38457 0.1700 ## pop 6.68e-04 1.001 8.78e-04 0.76086 0.4500 ## land -2.74e-05 1.000 6.89e-05 -0.39672 0.6900 ## literacy 1.88e-02 1.019 5.77e-03 3.25010 0.0012 ## africa -9.43e-01 0.389 3.94e-01 -2.39044 0.0170 ## asia -3.18e-03 0.997 3.69e-01 -0.00862 0.9900 ## latin 8.25e-02 1.086 3.54e-01 0.23284 0.8200 ## ## exp(coef) exp(-coef) 2.5% 97.5% ## manner 0.538 1.859 0.321 0.902 ## start 0.982 1.018 0.964 1.001 ## military 1.130 0.885 0.693 1.841 ## age 1.014 0.986 0.997 1.031 ## conflict 0.846 1.182 0.554 1.291 ## loginc 0.874 1.145 0.697 1.094 ## growth 1.043 0.959 0.983 1.106 ## pop 1.001 0.999 0.999 1.002 ## land 1.000 1.000 1.000 1.000 ## literacy 1.019 0.981 1.007 1.031 ## africa 0.389 2.568 0.180 0.844 ## asia 0.997 1.003 0.484 2.053 ## latin 1.086 0.921 0.542 2.174 ## ## Num. cases = 438 (34 cases omitted due to missing values) ## Pseudo Log-likelihood = -814 ## Pseudo likelihood ratio test = 101 on 13 df, gray.nonconst=crr(tenure,status.leaders,x,failcode=&quot;Non-Constitutional&quot;) ## 34 cases omitted due to missing values summary(gray.nonconst) ## Competing Risks Regression ## ## Call: ## crr(ftime = tenure, fstatus = status.leaders, cov1 = x, failcode = &quot;Non-Constitutional&quot;) ## ## coef exp(coef) se(coef) z p-value ## manner 7.87e-01 2.196 0.196832 3.996 6.4e-05 ## start -5.61e-02 0.945 0.010553 -5.315 1.1e-07 ## military -2.40e-01 0.787 0.200255 -1.199 2.3e-01 ## age -1.34e-03 0.999 0.008335 -0.161 8.7e-01 ## conflict 5.35e-01 1.708 0.183801 2.912 3.6e-03 ## loginc -3.05e-01 0.737 0.128953 -2.363 1.8e-02 ## growth -5.26e-02 0.949 0.029720 -1.769 7.7e-02 ## pop -1.13e-03 0.999 0.000879 -1.284 2.0e-01 ## land -2.69e-05 1.000 0.000079 -0.341 7.3e-01 ## literacy -9.43e-03 0.991 0.004066 -2.320 2.0e-02 ## africa -2.15e-01 0.807 0.284876 -0.753 4.5e-01 ## asia -4.99e-01 0.607 0.364670 -1.369 1.7e-01 ## latin 3.67e-01 1.443 0.290395 1.263 2.1e-01 ## ## exp(coef) exp(-coef) 2.5% 97.5% ## manner 2.196 0.455 1.493 3.230 ## start 0.945 1.058 0.926 0.965 ## military 0.787 1.271 0.531 1.165 ## age 0.999 1.001 0.982 1.015 ## conflict 1.708 0.586 1.191 2.448 ## loginc 0.737 1.356 0.573 0.949 ## growth 0.949 1.054 0.895 1.006 ## pop 0.999 1.001 0.997 1.001 ## land 1.000 1.000 1.000 1.000 ## literacy 0.991 1.009 0.983 0.999 ## africa 0.807 1.239 0.462 1.410 ## asia 0.607 1.648 0.297 1.240 ## latin 1.443 0.693 0.817 2.550 ## ## Num. cases = 438 (34 cases omitted due to missing values) ## Pseudo Log-likelihood = -855 ## Pseudo likelihood ratio test = 110 on 13 df, "],["repeated-events.html", "Chapter 5 Repeated Events", " Chapter 5 Repeated Events # Independence Model (Andersen-Gill approach) bladder.td &lt;- coxph(Surv(start, stop, event == 1) ~ rx + number + size , data = bladder) summary(bladder.td) ## Call: ## coxph(formula = Surv(start, stop, event == 1) ~ rx + number + ## size, data = bladder) ## ## n= 178, number of events= 112 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## rx -0.46469 0.62833 0.19973 -2.327 0.019989 * ## number 0.17496 1.19120 0.04707 3.717 0.000202 *** ## size -0.04366 0.95728 0.06905 -0.632 0.527196 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## rx 0.6283 1.5915 0.4248 0.9294 ## number 1.1912 0.8395 1.0862 1.3063 ## size 0.9573 1.0446 0.8361 1.0960 ## ## Concordance= 0.634 (se = 0.032 ) ## Likelihood ratio test= 17.52 on 3 df, p=6e-04 ## Wald test = 19.11 on 3 df, p=3e-04 ## Score (logrank) test = 19.52 on 3 df, p=2e-04 # Independence Model - Marginal means bladder.rse &lt;- coxph(Surv(start, stop, event == 1) ~ rx + number + size + cluster(id), data = bladder) summary(bladder.rse) ## Call: ## coxph(formula = Surv(start, stop, event == 1) ~ rx + number + ## size, data = bladder, cluster = id) ## ## n= 178, number of events= 112 ## ## coef exp(coef) se(coef) robust se z Pr(&gt;|z|) ## rx -0.46469 0.62833 0.19973 0.26556 -1.750 0.08015 . ## number 0.17496 1.19120 0.04707 0.06304 2.775 0.00551 ** ## size -0.04366 0.95728 0.06905 0.07762 -0.563 0.57376 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## rx 0.6283 1.5915 0.3734 1.057 ## number 1.1912 0.8395 1.0527 1.348 ## size 0.9573 1.0446 0.8222 1.115 ## ## Concordance= 0.634 (se = 0.032 ) ## Likelihood ratio test= 17.52 on 3 df, p=6e-04 ## Wald test = 11.54 on 3 df, p=0.009 ## Score (logrank) test = 19.52 on 3 df, p=2e-04, Robust = 11.27 p=0.01 ## ## (Note: the likelihood ratio and score tests assume independence of ## observations within a cluster, the Wald and robust score tests do not). # Conditional Model - Assuming Variable Effects Same Across Strata - PWP model bladder.con &lt;- coxph(Surv(start, stop, event == 1) ~ rx + number + size + strata(enum)+cluster(id), data = bladder) summary(bladder.con) ## Call: ## coxph(formula = Surv(start, stop, event == 1) ~ rx + number + ## size + strata(enum), data = bladder, cluster = id) ## ## n= 178, number of events= 112 ## ## coef exp(coef) se(coef) robust se z Pr(&gt;|z|) ## rx -0.333489 0.716420 0.216168 0.204787 -1.628 0.1034 ## number 0.119617 1.127065 0.053338 0.051387 2.328 0.0199 * ## size -0.008495 0.991541 0.072762 0.061635 -0.138 0.8904 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## rx 0.7164 1.3958 0.4796 1.070 ## number 1.1271 0.8873 1.0191 1.246 ## size 0.9915 1.0085 0.8787 1.119 ## ## Concordance= 0.616 (se = 0.032 ) ## Likelihood ratio test= 6.51 on 3 df, p=0.09 ## Wald test = 7.26 on 3 df, p=0.06 ## Score (logrank) test = 6.91 on 3 df, p=0.07, Robust = 8.83 p=0.03 ## ## (Note: the likelihood ratio and score tests assume independence of ## observations within a cluster, the Wald and robust score tests do not). # Conditional Model - Assuming Variable Effects change Across Strata - PWP model bladder.con &lt;- coxph(Surv(start, stop, event == 1) ~ strata(enum)*rx + strata(enum)*number + strata(enum)*size + cluster(id), data = bladder) summary(bladder.con) ## Call: ## coxph(formula = Surv(start, stop, event == 1) ~ strata(enum) + ## rx + number + size + strata(enum):rx + strata(enum):number + ## strata(enum):size, data = bladder, cluster = id) ## ## n= 178, number of events= 112 ## ## coef exp(coef) se(coef) robust se z Pr(&gt;|z|) ## rx -0.52598 0.59097 0.31583 0.31524 -1.669 0.09521 ## number 0.23818 1.26894 0.07588 0.07459 3.193 0.00141 ## size 0.06961 1.07209 0.10156 0.08863 0.785 0.43220 ## strata(enum)enum=2:rx 0.02215 1.02239 0.51451 0.60852 0.036 0.97097 ## strata(enum)enum=3:rx 0.66664 1.94768 0.74348 0.57671 1.156 0.24771 ## strata(enum)enum=4:rx 0.57632 1.77947 0.85238 0.62678 0.919 0.35784 ## strata(enum)enum=2:number -0.26282 0.76888 0.11763 0.16532 -1.590 0.11189 ## strata(enum)enum=3:number -0.18852 0.82819 0.20026 0.14196 -1.328 0.18420 ## strata(enum)enum=4:number -0.03390 0.96667 0.25366 0.19351 -0.175 0.86092 ## strata(enum)enum=2:size -0.23033 0.79427 0.15910 0.17506 -1.316 0.18827 ## strata(enum)enum=3:size 0.09849 1.10350 0.28757 0.18033 0.546 0.58497 ## strata(enum)enum=4:size -0.06052 0.94128 0.35382 0.37643 -0.161 0.87228 ## ## rx . ## number ** ## size ## strata(enum)enum=2:rx ## strata(enum)enum=3:rx ## strata(enum)enum=4:rx ## strata(enum)enum=2:number ## strata(enum)enum=3:number ## strata(enum)enum=4:number ## strata(enum)enum=2:size ## strata(enum)enum=3:size ## strata(enum)enum=4:size ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## rx 0.5910 1.6921 0.3186 1.096 ## number 1.2689 0.7881 1.0964 1.469 ## size 1.0721 0.9328 0.9011 1.275 ## strata(enum)enum=2:rx 1.0224 0.9781 0.3102 3.370 ## strata(enum)enum=3:rx 1.9477 0.5134 0.6290 6.031 ## strata(enum)enum=4:rx 1.7795 0.5620 0.5209 6.079 ## strata(enum)enum=2:number 0.7689 1.3006 0.5561 1.063 ## strata(enum)enum=3:number 0.8282 1.2075 0.6270 1.094 ## strata(enum)enum=4:number 0.9667 1.0345 0.6616 1.412 ## strata(enum)enum=2:size 0.7943 1.2590 0.5636 1.119 ## strata(enum)enum=3:size 1.1035 0.9062 0.7750 1.571 ## strata(enum)enum=4:size 0.9413 1.0624 0.4501 1.969 ## ## Concordance= 0.629 (se = 0.036 ) ## Likelihood ratio test= 14.5 on 12 df, p=0.3 ## Wald test = 20.29 on 12 df, p=0.06 ## Score (logrank) test = 15.73 on 12 df, p=0.2, Robust = 15.8 p=0.2 ## ## (Note: the likelihood ratio and score tests assume independence of ## observations within a cluster, the Wald and robust score tests do not). # Gap Time Model - Assuming Variable Effects Same Across Strata # # Can easily extend the gap time model to assume variable effects different same as above. # bladder.gap &lt;- coxph(Surv(time = (stop - start), event == 1) ~ rx + number + size + strata(enum) +cluster(id), data = bladder) summary(bladder.gap) ## Call: ## coxph(formula = Surv(time = (stop - start), event == 1) ~ rx + ## number + size + strata(enum), data = bladder, cluster = id) ## ## n= 178, number of events= 112 ## ## coef exp(coef) se(coef) robust se z Pr(&gt;|z|) ## rx -0.279005 0.756536 0.207348 0.215624 -1.294 0.19569 ## number 0.158046 1.171220 0.051942 0.050940 3.103 0.00192 ** ## size 0.007415 1.007443 0.070023 0.064333 0.115 0.90824 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## rx 0.7565 1.3218 0.4958 1.154 ## number 1.1712 0.8538 1.0599 1.294 ## size 1.0074 0.9926 0.8881 1.143 ## ## Concordance= 0.596 (se = 0.032 ) ## Likelihood ratio test= 9.33 on 3 df, p=0.03 ## Wald test = 11.84 on 3 df, p=0.008 ## Score (logrank) test = 10.27 on 3 df, p=0.02, Robust = 9.92 p=0.02 ## ## (Note: the likelihood ratio and score tests assume independence of ## observations within a cluster, the Wald and robust score tests do not). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
